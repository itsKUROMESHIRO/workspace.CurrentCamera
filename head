local inputservice = game:GetService("UserInputService")

-- Dictionary of FFlags and their values
local fflags = {
    DFIntTextureQualityOverride = "True",
    DFFlagTextureQualityOverrideEnabled = "True",
    FFlagDebugDisplayFPS = "True",
    FFlagNewLightAttenuation = "True",
    FIntTerrainArraySliceSize = "5",
    FFlagDebugSkyGray = "True",
    DFIntPerformanceControlTextureQualityBestUtility = "-3",
    FIntDebugTextureManagerSkipMips = "8",
    DFIntDebugFRMQualityLevelOverride = "1",
    FIntRenderShadowIntensity = "0",
    FFlagDisablePostFx = "True",
    DFFlagTextureQualityOverrideEnabled = "True",
    DFFlagDebugRenderForceTechnologyVoxel = "True",
    FIntRenderLocalLightUpdatesMin = "1",
    FIntRenderLocalLightUpdatesMax = "1",
    FIntRenderLocalLightFadeInMs = "0",
    DFFlagDebugPauseVoxelizer = "True",
    FIntRenderShadowmapBias = "0"
}

-- Apply FFlags
for flag, value in pairs(fflags) do
    local fflag = inputservice.KeyboardEnabled and flag or flag:gsub('DFInt', ''):gsub('DFFlag', ''):gsub('FFlag', ''):gsub('FInt', ''):gsub('DFString', ''):gsub('FString', '')

    if value and tostring(value) then
        value = tostring(value):gsub('"True"', 'true'):gsub('"False"', 'false')
    end
    
    if getfflag(fflag) ~= nil then
        pcall(setfflag, fflag, tostring(value))
    end
end

-- Function to remove unwanted objects
local function removeUnwantedObjects()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles") then
            obj:Destroy()
        elseif obj:IsA("Part") and obj.Material == Enum.Material.Grass then
            obj:Destroy()
        elseif obj:IsA("MeshPart") and obj.Material == Enum.Material.Grass then
            obj:Destroy()
        elseif obj:IsA("Decal") and obj.Texture and string.find(obj.Texture:lower(), "grass") then
            obj:Destroy()
        end
    end
end

-- Function to handle new unwanted objects efficiently
local function handleNewObjects(obj)
    if obj:IsA("ParticleEmitter") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles") then
        obj:Destroy()
    elseif obj:IsA("Part") and obj.Material == Enum.Material.Grass then
        obj:Destroy()
    elseif obj:IsA("MeshPart") and obj.Material == Enum.Material.Grass then
        obj:Destroy()
    elseif obj:IsA("Decal") and obj.Texture and string.find(obj.Texture:lower(), "grass") then
        obj:Destroy()
    end
end

-- Function to optimize terrain modification
local function optimizeTerrain()
    local terrain = workspace:FindFirstChildOfClass("Terrain")
    if terrain then
        terrain:FillRegion(terrain.MaxExtents, Enum.Material.Grass, Enum.Material.Ground)
    end
end

-- Execute once to clean up existing objects
task.spawn(removeUnwantedObjects)
task.spawn(optimizeTerrain)

-- Single connection to handle new objects efficiently
workspace.DescendantAdded:Connect(handleNewObjects)
